# PIPELINE DEFINITION
# Name: my-pipeline
# Description: My ML pipeline.
components:
  comp-train:
    executorLabel: exec-train
deploymentSpec:
  executors:
    exec-train:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train():\n    import subprocess\n    import shutil\n    import\
          \ os\n    command = \"source /root/.bashrc && conda activate epos && exec\
          \ bash\"\n    subprocess.run(\"conda list\", shell=True)\n    # Run the\
          \ command in a new shell\n    subprocess.run(command, shell=True, executable='/bin/bash')\n\
          \    subprocess.run([\n        'python', 'epos/scripts/create_example_list.py',\n\
          \        '--dataset=carObj12',\n        '--split=train',\n        '--split_type=primesense'\n\
          \    ])\n\n    # Step 3: Run the Python script to create the TFRecord\n\
          \    subprocess.run([\n        'python', 'epos/scripts/create_tfrecord.py',\n\
          \        '--dataset=carObj12',\n        '--split=train',\n        '--split_type=primesense',\n\
          \        '--examples_filename=carObj12_train-primesense_examples.txt',\n\
          \        '--add_gt=True',\n        '--shuffle=True',\n        '--rgb_format=png'\n\
          \    ], shell=True)\n\n    # Step 4: Create the output directory\n    os.makedirs('/app/store/tf_models/obj12',\
          \ exist_ok=True)\n\n    # Step 5: Run the Python script to train the model\n\
          \    subprocess.run(['python', 'train.py', '--model=obj12'],shell=True)\n\
          \    contents = os.listdir(\"/app/store/tf_models/obj12\")\n\n    # Source\
          \ file path\n    src = '/app/store/tf_models'\n\n    # Destination file\
          \ path\n    dst = '/trained_models'\n\n    # Copy the file\n    shutil.copytree(src,\
          \ dst,dirs_exist_ok=True)\n\n"
        image: gkorod/topo:1.0
pipelineInfo:
  description: My ML pipeline.
  name: my-pipeline
root:
  dag:
    tasks:
      train:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train
        taskInfo:
          name: train
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
---
platforms:
  kubernetes:
    deploymentSpec:
      executors:
        exec-train:
          pvcMount:
          - constant: trained-models
            mountPath: /trained_models
